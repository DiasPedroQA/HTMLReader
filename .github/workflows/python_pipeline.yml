name: TDD CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '40 17 * * 3'  # Executa toda quarta-feira às 17:40 UTC

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-quality:
    name: 🔍 Lint e Qualidade de Código
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📆 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install ruff isort pylint

      - name: ✅ Verificar Lint (Ruff)
        run: ruff check .

      - name: 🔄 Verificar Imports (Isort)
        run: isort src/ --profile black

      - name: 📏 Verificar Qualidade (Pylint)
        run: pylint src/ tests/ || true

  test-linux:
    name: 🐧 Testes com Coverage (Linux)
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 💾 Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📆 Instalar dependências
        run: |
          pip install -r requirements.txt -r requirements-dev.txt

      - name: 🤪 Rodar testes + Coverage
        run: |
          coverage run -m pytest -v --maxfail=1 --disable-warnings
          coverage report -m
          coverage xml
          coverage html

      - name: ☁️ Enviar Cobertura para Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

  test-windows:
    name: 🪟 Testes no Windows
    runs-on: windows-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📆 Instalar dependências e rodar testes
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pytest

  test-macos:
    name: 🍎 Testes no macOS
    runs-on: macos-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📆 Instalar dependências e rodar testes
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pytest

  security:
    name: 🔐 Análise de Segurança (Bandit)
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Rodar Bandit
        run: |
          pip install bandit
          bandit -r src/ -ll -ii

  criar-issue-erro:
    name: ❗ Criar Issue se houver falha na pipeline
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test-linux, test-windows, test-macos, security]
    if: failure()

    steps:
      - name: 🔄 Checkout do código
        uses: actions/checkout@v4

      - name: 📆 Instalar GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: 🚲 Criar Issue com falha
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_ISSUES }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          ISSUE_TITLE="🔴 Falha na pipeline: $WORKFLOW"
          ISSUE_BODY="🚨 Uma falha foi detectada na execução da pipeline **$WORKFLOW**.
